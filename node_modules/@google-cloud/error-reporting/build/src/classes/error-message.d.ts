import { ServiceContext } from '../configuration';
import { RequestInformationContainer } from './request-information-container';
export interface Context {
    httpRequest: {
        method: string;
        url: string;
        userAgent: string;
        referrer: string;
        responseStatusCode: number;
        remoteIp: string;
    };
    user: string;
    reportLocation: {
        filePath: string;
        lineNumber: number;
        functionName: string;
    };
}
export declare class ErrorMessage {
    eventTime: string;
    serviceContext: ServiceContext;
    message: string;
    context: Context;
    /**
     * The constructor for ErrorMessage takes no arguments and is solely meant to
     * to instantiate properties on the instance. Each property should be
     * externally set using the corresponding set function with the exception of
     * eventTime which can be set externally but does not need to be since it is
     * inited to an ISO-8601 compliant time string.
     * @type {Object}
     * @class ErrorMessage
     * @classdesc ErrorMessage is a class which is meant to store and control-for
     *  Stackdriver Error API submittable values. Meant to be JSON string-ifiable
     *  representation of the final values which will be submitted to the Error
     * API this class enforces type-checking on every setter function and will
     * write default type-friendly values to instance properties if given values
     * which are type-incompatible to expectations. These type-friendly default
     *  substitutions will occur silently and no errors will be thrown on
     * attempted invalid input under the premise that during misassignment some
     * error information sent to the Error API is better than no error information
     *  due to the Error library failing under invalid input.
     * @property {String} eventTime - an ISO-8601 compliant string representing when
     *  the error was created
     * @property {Object} serviceContext - The service information for the error
     * @property {String} serviceContext.service - The service that the error was
     *  was produced on
     * @property {String|Undefined} serviceContext.version - The service version
     *  that the error was produced on
     * @property {String} message - The error message
     * @property {Object} context - the request, user and report context
     * @property {Object} context.httpRequest - the request context
     * @property {String} context.httpRequest.method - the request method (e.g. GET)
     * @property {String} context.httpRequest.url - the request url or path
     * @property {String} context.httpRequest.userAgent - the requesting user-agent
     * @property {String} context.httpRequest.referrer - the request referrer
     * @property {Number} context.httpRequest.responseStatusCode - the request
     *  status-code
     * @property {String} context.httpRequest.remoteIp - the requesting remote ip
     * @property {String} context.user - the vm instances user
     * @property {Object} context.reportLocation - the report context
     * @property {String} context.reportLocation.filePath - the file path of the
     *  report site
     * @property {Number} context.reportLocation.lineNumber - the line number of the
     *  report site
     * @property {String} context.reportLocation.functionName - the function name of
     *  the report site
     */
    constructor();
    /**
     * Sets the eventTime property on the instance to an ISO-8601 compliant string
     * representing the current time at invocation.
     * @function setEventTimeToNow
     * @chainable
     * @returns {this} - returns the instance for chaining
     */
    setEventTimeToNow(): this;
    /**
     * Sets the serviceContext property on the instance and its two constituent
     * properties: service and version.
     * @function setServiceContext
     * @chainable
     * @param {String} service - the service the error was reported on
     * @param {String|Undefined} version - the version the service was on when the
     *  error was reported
     * @returns {this} - returns the instance for chaining
     */
    setServiceContext(service?: string, version?: string): this;
    /**
     * Sets the message property on the instance.
     * @chainable
     * @param {String} message - the error message
     * @returns {this} - returns the instance for chaining
     */
    setMessage(message?: string): this;
    /**
     * Sets the context.httpRequest.method property on the instance.
     * @chainable
     * @param {String} method - the HTTP method on the request which caused the
     *  errors instantiation
     * @returns {this} - returns the instance for chaining
     */
    setHttpMethod(method?: string): this;
    /**
     * Sets the context.httpRequest.url property on the instance.
     * @chainable
     * @param {String} url - the requests target url
     * @returns {this} - returns the instance for chaining
     */
    setUrl(url?: string): this;
    /**
     * Sets the context.httpRequest.userAgent property on the instance.
     * @chainable
     * @param {String} userAgent - the requests user-agent
     * @returns {this} - returns the instance for chaining
     */
    setUserAgent(userAgent?: string): this;
    /**
     * Sets the context.httpRequest.referrer property on the instance.
     * @chainable
     * @param {String} referrer - the requests referrer
     * @returns {this} - returns the instance for chaining
     */
    setReferrer(referrer?: string): this;
    /**
     * Sets the context.httpRequest.responseStatusCode property on the instance.
     * @chainable
     * @param {Number} responseStatusCode - the response status code
     * @returns {this} - returns the instance for chaining
     */
    setResponseStatusCode(responseStatusCode?: number): this;
    /**
     * Sets the context.httpRequest.remoteIp property on the instance
     * @chainable
     * @param {String} remoteIp - the requesters remote IP
     * @returns {this} - returns the instance for chaining
     */
    setRemoteIp(remoteIp?: string): this;
    /**
     * Sets the context.user property on the instance
     * @chainable
     * @param {String} user - the vm instances user
     * @returns {this} - returns the instance for chaining
     */
    setUser(user?: string): this;
    /**
     * Sets the context.reportLocation.filePath property on the instance
     * @chainable
     * @param {String} filePath - the vm instances filePath
     * @returns {this} - returns the instance for chaining
     */
    setFilePath(filePath?: string): this;
    /**
     * Sets the context.reportLocation.lineNumber property on the instance
     * @chainable
     * @param {Number} lineNumber - the line number of the report context
     * @returns {this} - returns the instance for chaining
     */
    setLineNumber(lineNumber?: number): this;
    /**
     * Sets the context.reportLocation.functionName property on the instance
     * @chainable
     * @param {String} functionName - the function name of the report context
     * @returns {this} - returns the instance for chaining
     */
    setFunctionName(functionName?: string): this;
    /**
     * Consumes the standard object created by the requestInformationExtractors
     * and assigns the properties of the object onto the instance.
     * @chainable
     * @param {Object} requestInformation - the standardized object created by the
     *  information extractors
     * @returns {this} - returns the instance for chaining
     */
    consumeRequestInformation(requestInformation: RequestInformationContainer): this;
}
