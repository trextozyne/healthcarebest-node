/*!
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/*!
 * @module error-reporting
 */
import { ErrorMessage } from './classes/error-message';
import { ConfigurationOptions } from './configuration';
import * as manualInterface from './interfaces/manual';
import * as manualRequestExtractor from './request-extractors/manual';
export declare type RestifyRequestHandler = (req: any, res: any, next: Function) => any;
/**
 * @typedef ConfigurationOptions
 * @type {Object}
 * @property {String} [projectId] - the projectId of the project deployed
 * @property {String} [keyFilename] - path to a key file to use for an API key
 * @property {String|Number} logLevel - a integer between and including 0-5 or a
 *  decimal representation of an integer including and between 0-5 in String
 *  form
 * @property {String} [key] - API key to use for communication with the service
 * @property {uncaughtHandlingEnum}
 *  [onUncaughtException=uncaughtHandlingEnum.ignore] - one of the uncaught
 *  handling options
 * @property {Object} [serviceContext] - the service context of the application
 * @property {String} [serviceContext.service] - the service the application is
 *  running on
 * @property {String} [serviceContext.version] - the version the hosting
 *  application is currently labelled as
 * @property {Boolean} [ignoreEnvironmentCheck] - flag indicating whether or not
 *  to communicate errors to the Stackdriver service even if NODE_ENV is not set
 *  to production
 * @property {String} [reportMode] - flag indicating whether or not
 *  to communicate errors to the Stackdriver service.  Possible values are:
 *  -> 'production' (default)
 *     -> Only report errors if NODE_ENV is set to "production".
 *  -> 'always'
 *     -> Always report errors regardless of the value of NODE_ENV.
 *  -> 'never'
 *     -> Never report errors regardless of the value of NODE_ENV.
 */
/**
 * @typedef Errors
 * @type {Object}
 * @property {Function} report - The manual interface to report Errors to the
 *  Stackdriver Error Reporting Service
 * @property {ErrorMessage} event - Returns a new ErrorMessage class instance
 *  to use to create custom messages
 * @property {Function} express - The express plugin for Stackdriver Error
 *  Reporting
 * @property {Object} hapi - The hapi plugin for Stackdriver Error Reporting
 * @property {Function} koa - The koa plugin for Stackdriver Error Reporting
 * @property {Function} restify - The restify plugin for Stackdriver Error
 *  Reporting
 */
/**
 * This module provides Stackdriver Error Reporting support for Node.js
 * applications.
 * [Stackdriver Error Reporting](https://cloud.google.com/error-reporting/) is
 * a feature of Google Cloud Platform that allows in-depth monitoring and
 * viewing of errors reported by applications running in almost any environment.
 *
 * This is the entry point for initializing the error reporting middleware. This
 * function will invoke configuration gathering and attempt to create a API
 * client which will send errors to the Error Reporting Service.
 *
 * @alias module:error-reporting
 * @constructor
 *
 * @resource [What is Stackdriver Error Reporting]{@link
 * https://cloud.google.com/error-reporting/}
 *
 * @param {ConfigurationOptions} initConfiguration - The desired project/error
 *     reporting configuration.
 */
export declare class ErrorReporting {
    private _logger;
    private _config;
    private _client;
    report: (err: any, request?: manualRequestExtractor.Request, additionalMessage?: string | {}, callback?: manualInterface.Callback | {} | string) => ErrorMessage;
    event: () => ErrorMessage;
    hapi: {
        register: (server: {}, options: {}, next?: Function) => void;
        name: string;
        version?: string;
    };
    express: (err: {}, req: {}, res: {}, next: Function) => void;
    restify: (server: any) => RestifyRequestHandler | RestifyRequestHandler[];
    koa: (context: any, next: {}) => IterableIterator<{}>;
    koa2: (context: any, next: Function) => Promise<void>;
    constructor(initConfiguration?: ConfigurationOptions);
}
