"use strict";
// Copyright 2016 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.handlerSetup = void 0;
const is = require("is");
const error_message_1 = require("../classes/error-message");
const populate_error_message_1 = require("../populate-error-message");
const manual_1 = require("../request-extractors/manual");
/**
 * The handler setup function serves to produce a bound instance of the
 * reportManualError function with no bound context, a bound first arugment
 * which is intended to be an initialized instance of the API client and a bound
 * second argument which is the environmental configuration.
 * @function handlerSetup
 * @param {AuthClient} client - an initialized API client
 * @param {NormalizedConfigurationVariables} config - the environmental
 *  configuration
 * @param {Object} logger - The logger instance created when the library API has
 *  been initialized.
 * @returns {reportManualError} - a bound version of the reportManualError
 *  function
 */
function handlerSetup(client, config, logger) {
    function reportManualError(err, request, additionalMessage, callback) {
        let em;
        if (is.string(request)) {
            // no request given
            callback = additionalMessage;
            additionalMessage = request;
            request = undefined;
        }
        else if (is.function(request)) {
            // neither request nor additionalMessage given
            callback = request;
            request = undefined;
            additionalMessage = undefined;
        }
        if (is.function(additionalMessage)) {
            callback = additionalMessage;
            additionalMessage = undefined;
        }
        if (err instanceof error_message_1.ErrorMessage) {
            // The API expects the error to contain a stack trace.  Thus we
            // append the stack trace of the point where the error was
            // constructed. See the `message-builder.js` file for more details.
            const stackErr = err;
            if (stackErr._autoGeneratedStackTrace) {
                err.setMessage(err.message + '\n' + stackErr._autoGeneratedStackTrace);
                // Delete the property so that if the ErrorMessage is reported a
                // second time, the stack trace is not appended a second time. Also,
                // the API will not accept the ErrorMessage if it has additional
                // properties.
                delete stackErr._autoGeneratedStackTrace;
            }
            else {
                logger.warn('Encountered a manually constructed error with message "' +
                    err.message +
                    '" but without a construction site ' +
                    'stack trace.  This error might not be visible in the ' +
                    'error reporting console.');
            }
            em = err;
        }
        else {
            em = new error_message_1.ErrorMessage();
            em.setServiceContext(config.getServiceContext().service, config.getServiceContext().version);
            populate_error_message_1.populateErrorMessage(err, em);
        }
        if (is.object(request)) {
            // TODO: Address this explicit cast
            em.consumeRequestInformation(manual_1.manualRequestInformationExtractor(request));
        }
        if (is.string(additionalMessage)) {
            em.setMessage(additionalMessage);
        }
        // TODO: Address this type cast
        client.sendError(em, callback);
        return em;
    }
    return reportManualError;
}
exports.handlerSetup = handlerSetup;
//# sourceMappingURL=manual.js.map