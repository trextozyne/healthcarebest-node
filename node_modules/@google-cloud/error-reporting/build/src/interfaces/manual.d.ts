/// <reference types="node" />
import * as http from 'http';
import { ErrorMessage } from '../classes/error-message';
import { Configuration, Logger } from '../configuration';
import { RequestHandler } from '../google-apis/auth-client';
import { Request } from '../request-extractors/manual';
export declare type Callback = (err: Error | null, response: http.ServerResponse | null, body: {}) => void;
declare type AnyError = any;
/**
 * The handler setup function serves to produce a bound instance of the
 * reportManualError function with no bound context, a bound first arugment
 * which is intended to be an initialized instance of the API client and a bound
 * second argument which is the environmental configuration.
 * @function handlerSetup
 * @param {AuthClient} client - an initialized API client
 * @param {NormalizedConfigurationVariables} config - the environmental
 *  configuration
 * @param {Object} logger - The logger instance created when the library API has
 *  been initialized.
 * @returns {reportManualError} - a bound version of the reportManualError
 *  function
 */
export declare function handlerSetup(client: RequestHandler, config: Configuration, logger: Logger): {
    (err: AnyError): ErrorMessage;
    (err: AnyError, request: Request): ErrorMessage;
    (err: AnyError, additionalMessage: string): ErrorMessage;
    (err: AnyError, callback: Callback): ErrorMessage;
    (err: AnyError, request: Request, callback: Callback): ErrorMessage;
    (err: AnyError, request: Request, additionalMessage: string): ErrorMessage;
    (err: AnyError, additionalMessage: string, callback: Callback): ErrorMessage;
    (err: AnyError, request: Request, additionalMessage: string, callback: Callback): ErrorMessage;
};
export {};
