export declare type LogLevel = 'error' | 'trace' | 'debug' | 'info' | 'warn' | 'fatal' | undefined;
export interface Logger {
    error(...args: Array<{}>): void;
    trace(...args: Array<{}>): void;
    debug(...args: Array<{}>): void;
    info(...args: Array<{}>): void;
    warn(...args: Array<{}>): void;
    fatal(...args: Array<{}>): void;
}
export declare type ReportMode = 'production' | 'always' | 'never';
export interface ConfigurationOptions {
    projectId?: string;
    keyFilename?: string;
    logLevel?: string | number;
    key?: string;
    serviceContext?: {
        service?: string;
        version?: string;
    };
    ignoreEnvironmentCheck?: boolean;
    reportMode?: ReportMode;
    credentials?: {};
    reportUnhandledRejections?: boolean;
}
export interface ServiceContext {
    service: string;
    version?: string;
}
/**
 * The Configuration constructor function initializes several internal
 * properties on the Configuration instance and accepts a runtime-given
 * configuration object which may be used by the Configuration instance
 * depending on the initialization transaction that occurs with the meta-data
 * service.
 * @class Configuration
 * @classdesc The Configuration class represents the runtime configuration of
 *  the Stackdriver error handling library. This Configuration class accepts the
 *  configuration options potentially given through the application interface
 *  but it also preferences values received from the metadata service over
 *  values given through the application interface. Becuase the Configuration
 *  class must handle async network I/O it exposes some methods as async
 *  functions which may cache their interactions results to speed access to
 *  properties.
 * @param {ConfigurationOptions} givenConfig - The config given by the
 *  hosting application at runtime. Configuration values will only be observed
 *  if they are given as a plain JS object; all other values will be ignored.
 * @param {Object} logger - The logger instance created when the library API has
 *  been initialized.
 */
export declare class Configuration {
    _logger: Logger;
    _reportMode: ReportMode;
    _projectId: string | null;
    _key: string | null;
    keyFilename: string | null;
    credentials: {} | null;
    _serviceContext: ServiceContext;
    _reportUnhandledRejections: boolean;
    _givenConfiguration: ConfigurationOptions;
    constructor(givenConfig: ConfigurationOptions | undefined, logger: Logger);
    /**
     * The _checkLocalServiceContext function is responsible for attempting to
     * source the _serviceContext objects values from runtime configuration and
     * the environment. First the function will check the env for known service
     * context names, if these are not set then it will defer to the
     * _givenConfiguration property if it is set on the instance. The function
     * will check env variables `GAE_MODULE_NAME` and `GAE_MODULE_VERSION` for
     * `_serviceContext.service` and
     * `_serviceContext.version` respectively. If these are not set the
     * `_serviceContext` properties will be left at default unless the given
     * runtime configuration supplies any values as substitutes.
     * @memberof Configuration
     * @private
     * @function _checkLocalServiceContext
     * @returns {Undefined} - does not return anything
     */
    _checkLocalServiceContext(): void;
    _determineReportMode(): void;
    /**
     * The _gatherLocalConfiguration function is responsible for determining
     * directly determing whether the properties `reportUncaughtExceptions` and
     * `key`, which can be optionally supplied in the runtime configuration,
     * should be merged into the instance. This function also calls several
     * specialized environmental variable checkers which not only check for the
     * optional runtime configuration supplied values but also the processes
     * environmental values.
     * @memberof Configuration
     * @private
     * @function _gatherLocalConfiguration
     * @returns {Undefined} - does not return anything
     */
    _gatherLocalConfiguration(): void;
    /**
     * The _checkLocalProjectId function is responsible for determing whether the
     * _projectId property was set by the metadata service and whether or not the
     * _projectId property should/can be set with a environmental or runtime
     * configuration variable. If, upon execution of the _checkLocalProjectId
     * function, the _projectId property has already been set to a string then it
     * is assumed that this property has been set with the metadata services
     * response. The metadata value for the project id always take precedence over
     * any other locally configured project id value. Given that the metadata
     * service did not set the project id this function will defer next to the
     * value set in the environment named `GCLOUD_PROJECT` if it is set and of
     * type string. If this environmental variable is not set the function will
     * defer to the _givenConfiguration property if it is of type object and has a
     * string property named projectId. If none of these conditions are met then
     * the _projectId property will be left at its default value.
     * @memberof Configuration
     * @private
     * @function _checkLocalProjectId
     * @param {Function} cb - The original user callback to invoke with the project
     *  id or error encountered during id capture
     * @returns {Undefined} - does not return anything
     */
    _checkLocalProjectId(): string | null;
    /**
     * Returns whether this configuration specifies that errors should be
     * reported to the error reporting API.  That is, "reportMode" is
     * either set to "always" or it is set to "production" and the value
     * of the NODE_ENV environment variable is "production".
     * @memberof Configuration
     * @public
     * @function getShouldReportErrorsToAPI
     * @returns {Boolean} - whether errors should be reported to the API
     */
    getShouldReportErrorsToAPI(): boolean;
    isReportingEnabled(): boolean;
    /**
     * Returns the _projectId property on the instance.
     * @memberof Configuration
     * @public
     * @function getProjectId
     * @returns {String|Null} - returns the _projectId property
     */
    getProjectId(): string | null;
    /**
     * Returns the _key property on the instance.
     * @memberof Configuration
     * @public
     * @function getKey
     * @returns {String|Null} - returns the _key property
     */
    getKey(): string | null;
    /**
     * Returns the keyFilename property on the instance.
     * @memberof Configuration
     * @public
     * @function getKeyFilename
     * @returns {String|Null} - returns the keyFilename property
     */
    getKeyFilename(): string | null;
    /**
     * Returns the credentials property on the instance.
     * @memberof Configuration
     * @public
     * @function getCredentials
     * @returns {Credentials|Null} - returns the credentials property
     */
    getCredentials(): {} | null;
    /**
     * Returns the _serviceContext property on the instance.
     * @memberof Configuration
     * @public
     * @function getKey
     * @returns {Object|Null} - returns the _serviceContext property
     */
    getServiceContext(): ServiceContext;
    /**
     * Returns the _reportUnhandledRejections property on the instance.
     * @memberof Configuration
     * @public
     * @function getReportUnhandledRejections
     * @returns {Boolean} - returns the _reportUnhandledRejections property
     */
    getReportUnhandledRejections(): boolean;
}
