"use strict";
// Copyright 2016 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
Object.defineProperty(exports, "__esModule", { value: true });
exports.createLogger = void 0;
const is = require("is");
const has = require("lodash.has");
const consoleLogLevel = require("console-log-level");
// eslint-disable-next-line @typescript-eslint/no-var-requires
const packageJson = require('../../package.json');
const LEVELNAMES = [
    'fatal',
    'error',
    'warn',
    'info',
    'debug',
    'trace',
];
const DEFAULT_LEVEL = 2; // warn.
function logLevelToName(level) {
    if (typeof level === 'string') {
        level = Number(level);
    }
    if (typeof level !== 'number') {
        level = DEFAULT_LEVEL;
    }
    if (level < 0)
        level = 0;
    if (level > 4)
        level = 4;
    return LEVELNAMES[level];
}
/**
 * Creates an instance of the a Logger class. This
 * instance will be configured to log at the level given by the environment or
 * the runtime configuration property `logLevel`. If neither of these inputs are
 * given or valid then the logger will default to logging at log level `WARN`.
 * Order of precedence for logging level is:
 * 1) Environmental variable `GCLOUD_ERRORS_LOGLEVEL`
 * 2) Runtime configuration property `logLevel`
 * 3) Default log level of `WARN` (2)
 * @function createLogger
 * @param {ConfigurationOptions} initConfiguration - the desired project/error
 *  reporting configuration. Will look for the  `logLevel` property which, if
 *  supplied, must be a number or stringified decimal representation of a
 *  number between and including 1 through 5
 * @returns {Object} - returns an instance of the logger created with the given/
 *  default options
 */
function createLogger(config) {
    // Default to log level: warn (2)
    let level = DEFAULT_LEVEL;
    if (has(process.env, 'GCLOUD_ERRORS_LOGLEVEL')) {
        // Cast env string as integer
        level = ~~process.env.GCLOUD_ERRORS_LOGLEVEL || DEFAULT_LEVEL;
    }
    else if (is.object(config) && has(config, 'logLevel')) {
        if (is.string(config.logLevel)) {
            // Cast string as integer
            level = ~~config.logLevel || DEFAULT_LEVEL;
        }
        else if (is.number(config.logLevel)) {
            level = Number(config.logLevel) || DEFAULT_LEVEL;
        }
        else {
            throw new Error('config.logLevel must be a number or decimal ' +
                'representation of a number in string form');
        }
    }
    return consoleLogLevel({
        stderr: true,
        prefix: (level) => `${level.toUpperCase()}:${packageJson.name}:`,
        level: logLevelToName(level),
    });
}
exports.createLogger = createLogger;
//# sourceMappingURL=logger.js.map